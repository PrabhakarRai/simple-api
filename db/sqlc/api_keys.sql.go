// Code generated by sqlc. DO NOT EDIT.
// source: api_keys.sql

package db

import (
	"context"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (key, owner) VALUES ($1, $2) RETURNING id, key, owner
`

type CreateAPIKeyParams struct {
	Key   string `json:"key"`
	Owner int32  `json:"owner"`
}

type CreateAPIKeyRow struct {
	ID    int32  `json:"id"`
	Key   string `json:"key"`
	Owner int32  `json:"owner"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (CreateAPIKeyRow, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey, arg.Key, arg.Owner)
	var i CreateAPIKeyRow
	err := row.Scan(&i.ID, &i.Key, &i.Owner)
	return i, err
}

const deleteAPIKeyByAPIKey = `-- name: DeleteAPIKeyByAPIKey :exec
DELETE FROM api_keys WHERE key = $1
`

func (q *Queries) DeleteAPIKeyByAPIKey(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKeyByAPIKey, key)
	return err
}

const deleteAPIKeysByUserID = `-- name: DeleteAPIKeysByUserID :exec
DELETE FROM api_keys WHERE owner = $1
`

func (q *Queries) DeleteAPIKeysByUserID(ctx context.Context, owner int32) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKeysByUserID, owner)
	return err
}

const deleteAPIKeysByUsername = `-- name: DeleteAPIKeysByUsername :exec
DELETE FROM api_keys WHERE api_keys.owner = (SELECT id FROM users WHERE users.username = $1)
`

func (q *Queries) DeleteAPIKeysByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKeysByUsername, username)
	return err
}

const getAPIKeyDetailsByKey = `-- name: GetAPIKeyDetailsByKey :one
SELECT id, key, owner, enabled, hits, errors FROM api_keys
WHERE key = $1 LIMIT 1
`

func (q *Queries) GetAPIKeyDetailsByKey(ctx context.Context, key string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyDetailsByKey, key)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Owner,
		&i.Enabled,
		&i.Hits,
		&i.Errors,
	)
	return i, err
}

const getAPIKeysByOwner = `-- name: GetAPIKeysByOwner :many
SELECT id, key, owner, enabled, hits, errors FROM api_keys
WHERE owner = $1
`

func (q *Queries) GetAPIKeysByOwner(ctx context.Context, owner int32) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, getAPIKeysByOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Owner,
			&i.Enabled,
			&i.Hits,
			&i.Errors,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAPIKeysByUsername = `-- name: GetAPIKeysByUsername :many
SELECT id, key, owner, enabled, hits, errors FROM api_keys
WHERE api_keys.owner = (SELECT id FROM users WHERE users.username = $1 LIMIT 1)
`

func (q *Queries) GetAPIKeysByUsername(ctx context.Context, username string) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, getAPIKeysByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Owner,
			&i.Enabled,
			&i.Hits,
			&i.Errors,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyEnabled = `-- name: UpdateAPIKeyEnabled :exec
UPDATE api_keys SET enabled = $2 WHERE key = $1
`

type UpdateAPIKeyEnabledParams struct {
	Key     string `json:"key"`
	Enabled bool   `json:"enabled"`
}

func (q *Queries) UpdateAPIKeyEnabled(ctx context.Context, arg UpdateAPIKeyEnabledParams) error {
	_, err := q.db.ExecContext(ctx, updateAPIKeyEnabled, arg.Key, arg.Enabled)
	return err
}

const updateAPIKeyErrors = `-- name: UpdateAPIKeyErrors :exec
UPDATE api_keys SET errors = errors+1 WHERE key = $1
`

func (q *Queries) UpdateAPIKeyErrors(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, updateAPIKeyErrors, key)
	return err
}

const updateAPIKeyHits = `-- name: UpdateAPIKeyHits :exec
UPDATE api_keys SET hits = hits+1 WHERE key = $1
`

func (q *Queries) UpdateAPIKeyHits(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, updateAPIKeyHits, key)
	return err
}
