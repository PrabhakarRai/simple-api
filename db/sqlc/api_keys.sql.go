// Code generated by sqlc. DO NOT EDIT.
// source: api_keys.sql

package db

import (
	"context"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (key, owner) VALUES ($1, $2) RETURNING id
`

type CreateAPIKeyParams struct {
	Key   string `json:"key"`
	Owner int32  `json:"owner"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey, arg.Key, arg.Owner)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteAPIKeysByUserID = `-- name: DeleteAPIKeysByUserID :exec
DELETE FROM api_keys WHERE owner = $1
`

func (q *Queries) DeleteAPIKeysByUserID(ctx context.Context, owner int32) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKeysByUserID, owner)
	return err
}

const deleteAPIKeysByUsername = `-- name: DeleteAPIKeysByUsername :exec
DELETE FROM api_keys WHERE api_keys.owner = (SELECT id FROM users WHERE users.username = $1 LIMIT 1)
`

func (q *Queries) DeleteAPIKeysByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKeysByUsername, username)
	return err
}

const getAPIKeyByUserID = `-- name: GetAPIKeyByUserID :one
SELECT id, key, owner, enabled, hits, errors FROM api_keys
WHERE api_keys.owner = $1
`

func (q *Queries) GetAPIKeyByUserID(ctx context.Context, owner int32) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByUserID, owner)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Owner,
		&i.Enabled,
		&i.Hits,
		&i.Errors,
	)
	return i, err
}

const getAPIKeyByUsername = `-- name: GetAPIKeyByUsername :one
SELECT id, key, owner, enabled, hits, errors FROM api_keys
WHERE api_keys.owner = (SELECT id FROM users WHERE users.username = $1 LIMIT 1)
`

func (q *Queries) GetAPIKeyByUsername(ctx context.Context, username string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByUsername, username)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Owner,
		&i.Enabled,
		&i.Hits,
		&i.Errors,
	)
	return i, err
}
